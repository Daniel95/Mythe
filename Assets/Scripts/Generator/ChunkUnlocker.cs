using UnityEngine;
using System.Collections.Generic;
using System.Collections;
public class ChunkUnlocker : MonoBehaviour {

	[SerializeField]
	private ChunkHolder chunkHolder;

	[SerializeField]
	private PlayerDistance playerDistance;

	[SerializeField]
	private int[] unlockSeconds;

    private List<List<string>> chunksToUnlock = new List<List<string>>();

    private int counter;

    //beginning of game.
    private List<string> introChunks 
        = new List<string> {
        "100001100001110301100001100001100001100001100001103011100001100001100001",
        "000000103001100001100301100001100001000000",
        "000000000000030100000010000001000000001030010000100000",
        
        "000000000000000020003000000000000000",
        "000000003000000002000100000010003001000000",
        };

    //after supermode has been introduced.
    private List<string> easyChunks 
        = new List<string> {
        "110011000000000000",
        "000000003000200000000000111100000000",
        "010000000000030000000103000100100000000000",
        "000000000000001000010000100301000010000100001030001030000100003010100010010010010010010010100001",
        "000000000000030000000100000000000000010001000000100010000000010001000300100000000000000010000000",
        "000000000000000301020000000000",
        "000000000300100000000020000000003000000000010000000030000000",
        "000000030000000000000200000000001000000000000030030000000000",
        "000000000000000300000001001000000030000000000000",
        "000000000030030000000000001000200000000000000000",
        "000000000000000100000010000000003010000001000000",
        "000000001000000000000300000000000010000000000000",
        "000000000020030000000010000000000000010030000000",

        "000000333333000000",
		

		
		"000000203302000000",
		"111011111411111011",
		"000000203302000000400005",
		
        };

    //after shield introduce chunk.
    private List<string> mediumChunks
        = new List<string> {
        "000000000000006000000000000000000000110011110011000000000000330033000000000000000000",
        "000000000060000000100001000000000000005000000000000000",
        "000000003007000000",
        "110000310000110007000000000000000000200004000000",
        "000000003002000000000000000000000000003002000007000000",
        "103301000000000000000000000007700000000000000000000000300002000000000000000000000000200003000000000000",
        "100001000000003307000000100001",
        "000000000020000000003000000300020000000000",
        "000000000000000000131030131000000000000000000000000000030131000131000000000000000000",
        "010000000000030000000103000100100000000000",
        "000000301111000000",
        "000000111103000000",
        "000000000000111111111111000000000500000000010010100001",
        "000000001030000100003000000000",
        "000000003000000000020002000000",
        "000010010000100000003020000000",
        "000000000001000000013000000010000000000000000000000310000000010000000000",
        "000000001000001000000030000000000200000000100020000000000000",
        "000000000030010000000010000000000010010000000030100000000100300000000001010000",
        "000000130000000200030000000000",
        
        "000000004000000000",
        "000000301103000000000000",
        "000000100020113000100300000000000000020000000002000000",

        "000000003300000000001100000000000000",
		"000000000002000000700000100001000007100001700000000000000000310013010010010010010010315013000000000000",
		"000000000000131302000000000000000000000000",
		"000000200000000000000000200002000000300002000000000000000000200002000000000020300000000000000000200002000000",
		"110000610003110000"
        };

    //after magnet has been introduced. 
    private List<string> hardChunks
    = new List<string> {
        
        "000000041150000000",
        "000000000000110000310000110011000013000011000000000000004000000000000000",
        "000000000300000000000000000007000000000000000300000000000000700000000000000000",
        "000000200000000020000000030000000000001030000000100100000000000001010000000010000050000100000001030000000000",
        "000000020000000000200130000000000000100010000000010030000000000020030000000002010000000000000001200010000000",
        
        "000000000000000000110011000000000000011110013310013310411115000000000000000000000000",
        "000000111111111111500005000000000000",
        "000000000000000020000000000030600001700000000030000000000000",
        "000000511111000066000000000000",
        "000000000001000111131111131111131121131111130111103011110311111311211311111311100001000000",
        "000000000000600000060000306000111600000004000000000000000000003300000000000000",
        "000000000000000000003300003300700000000007000000000330000330200000000000000000",
        "000000000000100001113311113311113311113311113311113311113311113311113311600006000000",
        "000000000000011110013310013310411115001100001100001100001100001100001100001100001100030030000000",

        "000000000060060000500000000000010000103002000000001030000001200010003000000000",
        "000000000200000002000000000000006000060600000000003000010000100010003000000000003000",
        "000000007000000000030070000000001100010010000001000000001003010000100010000001003000",
		"000000000000000007700000000007700000000000000000311111000000000000000000111113000000000000000000",
		"700013000010000010000013700010000010000013000000100020100001100001100111100000100000100000111140100000100000",
		"100001000006000000000020300000000007000007020003000003000000000000100001",
		"000000700000000000000000000000011111001061000101000011000001700000331100001610001001000101000011000501000000",
		"115011610016110011",

        "300000000003300000000003700000300006000003000000040000000000000000000060010000000000000600000000030006000000",
        "000000000300000000006600000000000006600300000001100010010000000003007000300000001010010001100000000000000000",

        };

    //after side walk enemy has been introduced
    private List<string> superHardChunks
    = new List<string> {
        
        "000300000000600000000006600000000006600000003006000000000000",
        "000000000000000000000000000030000000060003000000000030000000000000000000000000",
        "000000000000010200000000000030001000000010030000",
        "000000000020030000000000000030000000000000002010000000000000020010000000000000020200000000000000030000000000",
        "003070000300003000060302003000000300020030000307003000030000003020030000003006000300600030020003000030000300",
        
        "700000070030007000000700030070000007",
        "600000000030000000010006100300000000",
        "333333333333133331113011210312613016610316613016610316613016610316613016610316613016110311115011100001000000",
        "000000030110000000000030000000010000001003000100003010011600000000000000",
        "000001003011100112100011110601110001111000111100331105331100111100111000110000100000",
        "000000005000003000113111000000000000000006000060000006600300060000600000000000",

        "000000000000070000000300020000000020000000100100000000203000000110001001000000000300",
        "000000000060200006000060000000030001000015000010000130000003030130000103000130001003000000000000000020000000",

        "000070002000000010003000600001060000000100020000101001000000700300000000000000603066000000000000003000000000",
        "000000000000001111007050300700000070000000003020000000020000000203000000070000000000",
        };

    //this is when every new object has been introduced! so go nuts!
    private List<string> extremeChunks
    = new List<string>
    {
        "000000000000000000113311000000000000000000000000000000000000331111000000000000000000111133000000000000000000",
        "000000000000300000000110000001000000111000333100331000310000100011000105001003410030000300000000000000000000",
        "000000000033000033000000401100001100000000000000070000700000000000000070000007000000000000003300003300000000",

        "000000000000001100000002000000002000000000110000001103000000300100001011010000000005001100300100000000000000",
        "300000000020003006070000000600020000000003",
        "000000030000000700000010100000000307020010000000700000100120003070100020070000010001000070200310100001000000",
		"600001600031600001",
		"100000010000001000000100600013000100001000010000100000600006600006600006600006000000000002005000200000000002",
		"000001100006600001100006000001100003600001100003000001700000000007700000110011310013110011004000000000000000",

        "000000000000311111000000000060000070000000111131000000000070003000070000000000113111000000007000000000000000",
        "000000000000001010000000103020000000010010100001000000000000000777000000030303000000777000030030070000000000",
    };

    private List<string> almostImpossibleChunks
    = new List<string>
    {
        "003300110011610016610316610016610016613016610016110011000500000000000000000000",
        "000000007700000770000077000000030030007700077000770000030030000000007700000770000077000000013310100001000000",
    };

    void Start()
    {
        for (int i = 0; i < introChunks.Count; i++)
        {
            chunkHolder.LoadChunk(introChunks[i]);
        }

        chunksToUnlock.Add(easyChunks);
        chunksToUnlock.Add(mediumChunks);
        chunksToUnlock.Add(hardChunks);
        chunksToUnlock.Add(superHardChunks);
        chunksToUnlock.Add(extremeChunks);
        chunksToUnlock.Add(almostImpossibleChunks);

        StartCoroutine(Unlocking());
    }

    IEnumerator Unlocking()
    {
        //the cooldown before adding
        yield return new WaitForSeconds(unlockSeconds[counter]);

        //the list we are currently adding
        List<string> currentChunkList = chunksToUnlock[counter];

        //add every chunk
        for (int i = 0; i < currentChunkList.Count; i++)
        {
            chunkHolder.LoadChunk(currentChunkList[i]);
        }

        counter++;

        CheckLeftoverChunks();
    }

    void CheckLeftoverChunks()
    {
        //if our counter is above our list with chunks length, we added all chunks that exist and we exit the loop
        if (counter < chunksToUnlock.Count)
            StartCoroutine(Unlocking());
    }

}
